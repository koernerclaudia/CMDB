components:
   securitySchemes:
     bearerAuth:
       type: http
       scheme: bearer
   schemas:
     User:
       type: object
       required:
         - username
         - password
         - email
       properties:
         _id:
           type: string
           description: The auto-generated id of the user (generated by MongoDB).
         username:
           type: string
           minLength: 5
           description: Username of the user, must be unique and have at least 5 charaters.
         password:
           type: string
           minLength: 8
           format: password
           description: The password of a user (hashed before stored); must have at least 8 characters.
         email:
           type: string
           format: email
           description: The email of the user, must be unique.
         FavoriteMovies:
           type: array
           items:
             type: string
           description: An array of the IDs of the favorite movies of user, arrays are created once the user is logged in and favorites a movie. IDs listed are the IDs of the movies in the database.
       example:
         _id: 66d5cab8fa0f5fce0a2ce075
         username: 'brucewayne'
         password: 'thedarknight81'
         email: 'iambatman@gotham.com'
         favoriteMovies: [ ObjectId('65ba8ycee7596f8dddt5bd67'), ObjectId('65ba8ycee7596f8dddt5bd68'), ObjectId('65ba8ycee7596f8dddt5bd69') ]
     Movie:
       type: object
       required:
         - Title
         - Description
       properties:
         _id:
           type: string
           description: Auto-generated id of the movie, generated by MongoDB.
         Title:
           type: string
           description: Title of movie.
         Description:
           type: string
           description: Short summary of the movie.
         Genre:
           type: object
           properties:
             Type: 
               type: string
               description: Genre type.
             Description: 
               type: string
               description: General information about the genre.
         Director:
           type: object
           properties:
             Name:
               type: string
               description: Name of the movie director.
             Birthyear:
               type: string
               format: Year
               description: Year the director was born.
         Actors:
            type: array
            items:
              type: string
              description: An array of the actors in the movie.
         ImageURL:
           type: string
           description: Still, poster or other image of the movie. Link taken from the web. 
         Featured:
           type: boolean
           description: This field stores information whether the movie is featured.
       example:
         _id: 66a374b384a37c5b1b60c5c8
         Title: "Black Swan"
         Description: "A ballerina's role in a New York City ballet creates a consuming obsession that leads to her psychological unraveling."
         Genre: 
           Type: "Thriller"
           Description: "Gives you the chills."
         Director: 
           Name: "Darren Aronofsky"
           Birthyear: 1969
         Actors: ["Natalie Portman", "Mila Kunis"]
         ImageURL: "https://cdn11.bigcommerce.com/s-yzgoj/images/stencil/1280x1280/products/2893777/5958907/MOVCB83563__34494.1679602412.jpg?c=2"
         Featured: true

# /:
#   get:
#      description: Returns a text welcome message
#      responses:
#           200:
#               description: text welcome messsage

paths:
  /movies:
    get:
      summary: Returns a list of all movies
      security:
        - bearerAuth: []
      parameters:
        - name: genre
          in: query
          description: Filter movies by genre
          required: false
          schema:
            type: string
        - name: actor
          in: query
          description: Filter movies by actor
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of movies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '404':
          description: Genre or actor not found
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Server error
          content:
            text/plain:
              schema:
                type: string

  /movies/{Title}:
    get:
      summary: Get a specific movie by title and all its related information.
      security:
        - bearerAuth: []
      parameters:
        - name: Title
          in: path
          required: true
          description: Title of the movie
          schema:
            type: string
      responses:
        '200':
          description: Detailed movie information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '404':
          description: Movie not found
          content:
            text/plain:
              schema:
                type: string
                example: "Error: This movie is not listed. Check again."
        '500':
          description: Server error
          content:
            text/plain:
              schema:
                type: string
                example: "Error: Server error"

  /movies/genres/{genreType}:
    get:
      summary: Get genre details by genre type
      security:
        - bearerAuth: []
      parameters:
        - name: genreType
          in: path
          required: true
          description: Genre type of the movie
          schema:
            type: string
      responses:
        '200':
          description: Genre name and descrition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie/properties/Genre'
        '404':
          description: No such genre.
          content:
            text/plain:
              schema:
                type: string
                example: "No such genre."
        '500':
          description: Server error
          content:
            text/plain:
              schema:
                type: string
                example: "Error: Server error"

  /movies/directors/{directorName}:
    get:
      summary: Get director details by director name.
      security:
        - bearerAuth: []
      parameters:
        - name: directorName
          in: path
          required: true
          description: Director's name
          schema:
            type: string
      responses:
        '200':
          description: Director name and birthyear.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie/properties/Director'
        '404':
          description: Director not found
          content:
            text/plain:
              schema:
                type: string
                example: "No such director"
        '500':
          description: Server error
          content:
            text/plain:
              schema:
                type: string
                example: "Error: Server error"


# /users:
#   post:
#     tags: [users]
#     summary: User registration
#     description: Allow user to register
#     requestBody:
#       required: true
#       content:
#         application/json:
#           schema:
#             $ref: '#/components/schemas/User'
#           example: 
#             username: MyUsername
#             password: string
#             email: my@email.com
#             birthdate: 1998-08-01
#     responses:
#       201:
#         description: created user is returned
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/User'
#       500:
#         description: some error occured
          


# /login:
#   post:
#     tags: [users]
#     summary: User login
#     description: Logs a user into the application.
#     requestBody:
#       required: true
#       content:
#         application/json:
#           schema:
#             type: object
#             properties:
#               username:
#                 type: string
#                 description: The username of the user.
#               password:
#                 type: string
#                 description: The password of the user.
#             required:
#               - username
#               - password
#     responses:
#       '200':
#         description: User successfully logged in
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 user:
#                   $ref: '#/components/schemas/User'
#                   description: The logged-in user's information.
#                 token:
#                   type: string
#                   description: Access token for the authenticated user.
#       '400':
#         description: Validation error
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 errors:                 
#                   type: object
#                   properties:
#                     message:
#                       type: string
#                       description: message about cause of the error
#                     user:
#                       type: object
#                       description: the provided login information of user
#       '500':
#         description: Internal server error

# /users/{username}:
#   put:
#     tags: [users]
#     summary: Update user information
#     description: |
#       Updates user information for the specified username.
#       Requires a valid JWT token to be included in the request headers as a bearer token.
#     parameters:
#       - in: path
#         name: username
#         required: true
#         schema:
#           type: string
#         description: The username of the user to update.
#     security:
#       - bearerAuth: []
#     requestBody:
#       required: true
#       content:
#         application/json:
#           schema:
#             $ref: '#/components/schemas/User'
#           example: 
#             username: MyUsername
#             password: string
#             email: my@email.com
#     responses:
#       '200':
#         description: User information successfully updated
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/User'
#       '401':
#         description: Unauthorized
#       '500':
#         description: Internal server error

# /users/{Username}:
#   delete:
#     tags: [users]
#     summary: Deregister User
#     description: |
#       Deletes the specified user account.
#       Requires a valid JWT token to be included in the request headers as a bearer token.
#     parameters:
#       - in: path
#         name: Username
#         required: true
#         schema:
#           type: string
#         description: The username of the user to deregister.
#     security:
#       - bearerAuth: []
#     responses:
#       '200':
#         description: User successfully deleted
#       '400':
#         description: Permission denied or user not found
#       '401':
#         description: Unauthorized - Missing or invalid JWT token
#       '500':
#         description: Internal server error

# /users/{Username}/{MovieID}:
#   post:
#     tags: [users]
#     summary: Add movie to users list of favorites
#     description: Adds the specified movie to the user's list of favorite movies.
#     parameters:
#       - in: path
#         name: Username
#         required: true
#         schema:
#           type: string
#         description: The username of the user.
#       - in: path
#         name: MovieID
#         required: true
#         schema:
#           type: string
#         description: The ID of the movie to add to favorites.
#     security:
#       - bearerAuth: []
#     responses:
#       '200':
#         description: Movie successfully added to favorites
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/User'
#       '400':
#         description: Permission denied or error adding movie to favorites
#       '401':
#         description: Unauthorized - Missing or invalid JWT token
#       '500':
#         description: Internal server error

#   delete:
#     tags: [users]
#     summary: Remove movie from users list of favorites
#     description: Removes the specified movie from the user's list of favorite movies.
#     parameters:
#       - in: path
#         name: Username
#         required: true
#         schema:
#           type: string
#         description: The username of the user.
#       - in: path
#         name: MovieID
#         required: true
#         schema:
#           type: string
#         description: The ID of the movie to remove from favorites.
#     security:
#       - bearerAuth: []
#     responses:
#       '200':
#         description: Movie successfully removed from favorites
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/User'
#       '400':
#         description: Permission denied, user not found, or error removing movie from favorites
#       '401':
#         description: Unauthorized - Missing or invalid JWT token
#       '500':
#         description: Internal server error

# /users/{Username}/favoriteMovies:
#   get:
#     tags: [users]
#     summary: Get Favorite Movies
#     description: Retrieves a list of a user's favorite movies.
#     parameters:
#       - in: path
#         name: Username
#         required: true
#         schema:
#           type: string
#         description: The username of the user whose favorite movies are to be retrieved.
#     security:
#       - bearerAuth: []
#     responses:
#       '200':
#         description: List of favorite movies successfully retrieved
#         content:
#           application/json:
#             schema:
#               type: array
#               items:
#                 type: string
#               description: List of movie IDs representing the user's favorite movies.
#       '400':
#         description: User not found
#       '401':
#         description: Unauthorized - Missing or invalid JWT token
#       '500':
#         description:  server error

